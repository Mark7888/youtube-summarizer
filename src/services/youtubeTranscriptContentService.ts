/**
 * Content-side service for YouTube transcript operations.
 * This service runs in the content script context and directly uses
 * YoutubeTranscriptContentFetcher to access YouTube's API from the page context.
 * 
 * Use this service in content scripts (e.g., UI components like SummaryOverlay).
 * For background script operations, use youtubeTranscriptService.ts instead.
 */

import { YoutubeTranscriptContentFetcher, CaptionTrack, TranscriptSegment } from '../apis/youtubeTranscriptContentFetcher';

export interface LanguageOption {
    code: string;
    name: string;
    vssId: string; // Unique identifier (e.g., ".en" vs "a.en")
    isAutoGenerated: boolean;
}

export interface TranscriptResult {
    success: boolean;
    transcript?: string;
    language?: string;
    vssId?: string; // Track identifier used
    error?: string;
}

/**
 * Get available languages for a YouTube video
 * This runs directly in the content script context
 */
export async function getAvailableLanguages(videoId: string): Promise<LanguageOption[]> {
    try {
        const captionTracks = await YoutubeTranscriptContentFetcher.getLanguages(videoId);
        
        return captionTracks.map((track: CaptionTrack) => {
            // Extract name from either simpleText or runs array
            let name = track.languageCode; // fallback
            if (track.name?.simpleText) {
                name = track.name.simpleText;
            } else if (track.name?.runs && track.name.runs.length > 0) {
                name = track.name.runs[0].text;
            }
            
            return {
                code: track.languageCode,
                name: name,
                vssId: track.vssId || track.languageCode,
                isAutoGenerated: track.kind === 'asr'
            };
        });
    } catch (error) {
        console.error('Failed to get available languages:', error);
        return [];
    }
}

/**
 * Fetch transcript for a YouTube video with optional language
 * This runs directly in the content script context
 */
export async function fetchTranscript(videoId: string, language?: string): Promise<TranscriptResult> {
    try {
        const segments: TranscriptSegment[] = await YoutubeTranscriptContentFetcher.fetchTranscript(videoId, language);
        
        // Process segments into a single text string
        const transcriptText = segments
            .map(segment => segment.text.trim())
            .join(' ')
            .replace(/\s+/g, ' ')
            .trim();
        
        return {
            success: true,
            transcript: transcriptText,
            language: segments[0]?.lang || language,
            vssId: segments[0]?.vssId
        };
    } catch (error) {
        console.error('Failed to fetch transcript:', error);
        return {
            success: false,
            error: error instanceof Error ? error.message : 'Failed to retrieve transcript'
        };
    }
}

/**
 * Extract video ID from YouTube URL or return the ID if already extracted
 */
export function extractVideoId(url: string): string | null {
    // If it's already an 11-character ID, return it
    if (url.length === 11) {
        return url;
    }
    
    // Try to extract from URL
    const patterns = [
        /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/i,
        /^([a-zA-Z0-9_-]{11})$/
    ];
    
    for (const pattern of patterns) {
        const match = url.match(pattern);
        if (match && match[1]) {
            return match[1];
        }
    }
    
    return null;
}
